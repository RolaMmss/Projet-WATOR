from world import World
import random

class Fish:
    """Classe repr√©sentant un poisson dans un monde simul√©

    Attributs:
        fish_count (int): Compteur de poissons cr√©√©s
    """
    fish_count = 0
    def __init__(self, x, y):
        """Initialise un poisson avec des coordonn√©es x et y

        Args:
            x (int): Coordonn√©e x de la position du poisson
            y (int): Coordonn√©e y de la position du poisson
        """
        self.x = x
        self.y = y
        self.reproduction_number = 2


    def move(self, world):
        """Fait bouger le poisson dans le monde simul√©

        Args:
            world (World): Le monde simul√© o√π le poisson se d√©place

        Returns:
            tuple: Anciennes coordonn√©es x et y du poisson
        """
        old_x = self.x
        old_y = self.y
        # G√©n√®re une liste de positions possibles pour le poisson de se d√©placer
        possible_positions = self.verification_move(world)
        #Si il y a des positions possibles pour le poisson de se d√©placer
        if len(possible_positions) > 0:
            # Choisit al√©atoirement une position de la liste possible_positions
            new_pos = random.choice(possible_positions)
            # Met √† jour la grille en enlevant le poisson de sa position actuelle
            world.table[self.x][self.y] = '  '
            # Met √† jour les coordonn√©es du poisson
            self.x = new_pos[0]
            self.y = new_pos[1]
            # Met √† jour la grille en ajoutant le poisson √† sa nouvelle position
            world.table[self.x][self.y] = 'üê†'
        return old_x , old_y
                
    def reproduce(self, world, day, old_x, old_y):
        """Fait reproduire le poisson dans le monde simul√©

        Args:
            world (World): Le monde simul√© o√π le poisson se reproduit
            day (int): Le jour actuel de la simulation
            old_x (int): Ancienne coordonn√©e x de la position du poisson
            old_y (int): Ancienne coordonn√©e y de la position du poisson
        """
        if day % self.reproduction_number == 0:
            if world.table[old_x][old_y] == "  ":
                new_fish = Fish(old_x, old_y)
                Fish.fish_count += 1
                world.add_fish(new_fish)
                  
    def verification_move(self, world):
        """V√©rifie les positions possibles pour le poisson de se d√©placer

        Args:
            world (World): Le monde simul√© o√π le poisson se d√©place

        Returns:
            list: Liste des positions possibles pour le poisson
        """
        # Initialise une liste de positions possibles pour le poisson de se d√©placer
        possible_positions = []
        #Boucle √† travers les d√©placements possibles pour le poisson (dx et dy peuvent prendre les valeurs -1, 0, 1)
        for dx in [-1, 0, 1]:
            for dy in [-1, 0, 1]:
                # Calcul les nouvelles coordonn√©es du poisson en utilisant l'op√©rateur modulo pour s'assurer 
                # qu'elles restent dans les limites de la grille en bouclant sur les bords
                x = (self.x + dx) % world.rows
                y = (self.y + dy) % world.cols 
                # V√©rifie si la case cible ne contient pas un requin ou un autre poisson
                if world.table[x][y] != 'ü¶à' and world.table[x][y] != 'üê†':
                    # Ajoute les coordonn√©es de la case cible √† la liste de positions possibles
                    possible_positions.append((x, y))
        # Retourne la liste de positions possibles
        return possible_positions
  
                        
  